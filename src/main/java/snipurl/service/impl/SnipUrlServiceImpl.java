package snipurl.service.impl;

import com.google.common.hash.Hashing;
import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import snipurl.dto.UrlDto;
import snipurl.dto.UrlResponseDto;
import snipurl.entity.Url;
import snipurl.exception.ResourceNotFoundException;
import snipurl.repository.UrlRepository;
import snipurl.service.SnipUrlService;
import snipurl.utils.SnipUrlMapper;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.util.Optional;

import static snipurl.utils.Constants.APPLICATION_URL;
import static snipurl.utils.Constants.SHORT_LINK;


@Service
@RequiredArgsConstructor
public class SnipUrlServiceImpl implements SnipUrlService {

    private final UrlRepository urlRepository;

    @Value(APPLICATION_URL)
    private String applicationUrl;

    /**
     * Generates a short link for the provided URL.
     * This method takes a DTO containing details of a URL and generates a short link for that URL.
     * If the URL provided is not empty, it encodes the URL, maps it to an Url object, sets its expiration date
     * based on the provided or default expiration date, persists it, and then maps the persisted Url object
     * to a UrlResponseDto using a mapper.
     *
     * @param urlDto The data transfer object (DTO) containing details of the URL for which a short link is to be generated.
     * @return A UrlResponseDto representing the generated short link, or null if the provided URL is empty.
     */
    @Override
    public UrlResponseDto generateShortLink(UrlDto urlDto) {

        Url urlToPersist = null;

        if (StringUtils.isNotEmpty(urlDto.getUrl())) {
            String encodedUrl = encodeUrl(urlDto.getUrl());

            urlToPersist = SnipUrlMapper.MAPPER.mapToUrl(urlDto, encodedUrl);
            urlToPersist.setExpirationDate(getExpirationDate(urlDto.getExpirationDate(), urlToPersist.getCreationDate()));
            Url urlToReturn = persistShortLink(urlToPersist);
        }

        return SnipUrlMapper.MAPPER.mapToUrlResponseDto(urlToPersist, applicationUrl);
    }

    /**
     * Persists the provided URL.
     * This method saves the given URL entity in the database by utilizing the URL repository.
     *
     * @param url The URL entity to be persisted.
     * @return The persisted URL entity.
     */
    @Override
    public Url persistShortLink(Url url) {
        return urlRepository.save(url);
    }

    /**
     * Retrieves the URL entity associated with the provided short link.
     * This method searches for the URL entity corresponding to the given short link in the database.
     * If the URL entity is found, it is returned; otherwise, a ResourceNotFoundException is thrown.
     *
     * @param url The short link for which the associated URL entity is to be retrieved.
     * @return The URL entity associated with the provided short link.
     * @throws ResourceNotFoundException If no URL entity is found for the given short link.
     */
    @Override
    public Url getEncodedUrl(String url) {
        Optional<Url> optionalUrlToReturn = urlRepository.findByShortLink(url);
        if (optionalUrlToReturn.isPresent()) {
            return optionalUrlToReturn.get();
        } else {
            throw new ResourceNotFoundException(SHORT_LINK, url);
        }
    }

    /**
     * Deletes the URL entity associated with the provided short link.
     * This method deletes the URL entity corresponding to the given short link from the database.
     *
     * @param url The URL entity to be deleted.
     */
    @Override
    public void deleteShortLink(Url url) {
        urlRepository.delete(url);
    }

    private LocalDateTime getExpirationDate(String expirationDate, LocalDateTime creationDate) {
        if (StringUtils.isBlank(expirationDate)) {
            return creationDate.plusMinutes(30);
        }
        return LocalDateTime.parse(expirationDate);
    }


    /**
     * Encodes the given URL to generate a unique short link.
     * This method concatenates the current timestamp with the provided URL to ensure the generation
     * of distinct short links for the same URL when multiple users request its shortening. By appending
     * the current time, the method enhances the uniqueness of the generated short links, thus preventing
     * collisions and ensuring each shortened URL is unique.
     *
     * @param url The URL to be encoded.
     * @return A unique short link generated by encoding the provided URL.
     */
    private String encodeUrl(String url) {
        String encodedUrl = null;
        LocalDateTime currentTime = LocalDateTime.now();
        encodedUrl = Hashing.murmur3_32_fixed()
                .hashString(url.concat(currentTime.toString()), StandardCharsets.UTF_8)
                .toString();
        return encodedUrl;
    }
}